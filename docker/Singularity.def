WARNING COPY requested from layer nipreps/miniconda@sha256:40fffd37963502dcd8549773559fc21182f52460e59e0ad6398a84faf6055641, but layer not previously defined.
Bootstrap: docker
From: ubuntu:focal-20210416
Stage: spython-base

%files
helper/fetch_templates.py fetch_templates.py
%post
# Vincent imaging developing env Docker Container
#
# MIT License
#
# Copyright (c) 2022 The NiPreps Developers
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Vincent adapted from fMRIPrep docker file from https://github.com/nipreps/fmriprep/blob/master/Dockerfile

# Use Ubuntu 20.04 LTS

TZ=America/Toronto
ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

vincent_arsenal_v=0.1.0

# adding linux sources
#RUN printf "deb http://archive.debian.org/debian/ jessie main\ndeb-src http://archive.debian.org/debian/ jessie main\ndeb http://security.debian.org jessie/updates main\ndeb-src http://security.debian.org jessie/updates main" > /etc/apt/sources.list

# Prepare environment
apt-get update && \
apt-get install -y --no-install-recommends \
apt-utils \
autoconf \
build-essential \
bzip2 \
ca-certificates \
curl \
git \
libtool \
lsb-release \
netbase \
pkg-config \
unzip \
xvfb && \
apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

DEBIAN_FRONTEND="noninteractive"
LANG="en_US.UTF-8"
LC_ALL="en_US.UTF-8"

# Installing freesurfer, install all the packages 
#COPY helper/freesurfer7.2-exclude.txt /usr/local/etc/freesurfer7.2-exclude.txt

curl -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.2.0/freesurfer-linux-ubuntu18_amd64-7.2.0.tar.gz | tar zxv --no-same-owner -C /opt

#--exclude-from=/usr/local/etc/freesurfer7.2-exclude.txt

# Simulate SetUpFreeSurfer.sh
FSL_DIR="/opt/fsl-6.0.5.1"
OS="Linux"
FS_OVERRIDE=0
FIX_VERTEX_AREA=""
FSF_OUTPUT_FORMAT="nii.gz"
FREESURFER_HOME="/opt/freesurfer"
SUBJECTS_DIR="$FREESURFER_HOME/subjects"
FUNCTIONALS_DIR="$FREESURFER_HOME/sessions"
MNI_DIR="$FREESURFER_HOME/mni"
LOCAL_DIR="$FREESURFER_HOME/local"
MINC_BIN_DIR="$FREESURFER_HOME/mni/bin"
MINC_LIB_DIR="$FREESURFER_HOME/mni/lib"
MNI_DATAPATH="$FREESURFER_HOME/mni/data"
PERL5LIB="$MINC_LIB_DIR/perl5/5.8.5"
MNI_PERL5LIB="$MINC_LIB_DIR/perl5/5.8.5"
PATH="$FREESURFER_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH"

# FSL 6.0.5.1
apt-get update -qq \
&& apt-get install -y -q --no-install-recommends \
bc \
dc \
file \
libfontconfig1 \
libfreetype6 \
libgl1-mesa-dev \
libgl1-mesa-dri \
libglu1-mesa-dev \
libgomp1 \
libice6 \
libxcursor1 \
libxft2 \
libxinerama1 \
libxrandr2 \
libxrender1 \
libxt6 \
sudo \
wget \
&& apt-get clean \
&& rm -rf /var/lib/apt/lists/* \
&& echo "Downloading FSL ..." \
&& mkdir -p /opt/fsl-6.0.5.1 \
&& curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.5.1-centos7_64.tar.gz \
| tar -xz -C /opt/fsl-6.0.5.1 --strip-components 1 \
--exclude "fsl/config" \
--exclude "fsl/data/atlases" \
--exclude "fsl/data/first" \
--exclude "fsl/data/mist" \
--exclude "fsl/data/possum" \
--exclude "fsl/data/standard/bianca" \
--exclude "fsl/data/standard/tissuepriors" \
--exclude "fsl/doc" \
--exclude "fsl/etc/default_flobs.flobs" \
--exclude "fsl/etc/fslconf" \
--exclude "fsl/etc/js" \
--exclude "fsl/etc/luts" \
--exclude "fsl/etc/matlab" \
--exclude "fsl/extras" \
--exclude "fsl/include" \
--exclude "fsl/python" \
--exclude "fsl/refdoc" \
--exclude "fsl/src" \
--exclude "fsl/tcl" \
--exclude "fsl/bin/FSLeyes" \
&& find /opt/fsl-6.0.5.1/bin -type f -not \( \
-name "applywarp" -or \
-name "bet" -or \
-name "bet2" -or \
-name "convert_xfm" -or \
-name "fast" -or \
-name "flirt" -or \
-name "fsl_regfilt" -or \
-name "fslhd" -or \
-name "fslinfo" -or \
-name "fslmaths" -or \
-name "fslmerge" -or \
-name "fslroi" -or \
-name "fslsplit" -or \
-name "fslstats" -or \
-name "imtest" -or \
-name "mcflirt" -or \
-name "melodic" -or \
-name "prelude" -or \
-name "remove_ext" -or \
-name "susan" -or \
-name "topup" -or \
-name "zeropad" \) -delete \
&& find /opt/fsl-6.0.5.1/data/standard -type f -not -name "MNI152_T1_2mm_brain.nii.gz" -delete
FSLDIR="/opt/fsl-6.0.5.1"
PATH="/opt/fsl-6.0.5.1/bin:$PATH"
FSLOUTPUTTYPE="NIFTI_GZ"
FSLMULTIFILEQUIT="TRUE"
FSLLOCKDIR=""
FSLMACHINELIST=""
FSLREMOTECALL=""
FSLGECUDAQ="cuda.q"
LD_LIBRARY_PATH="/opt/fsl-6.0.5.1/lib:$LD_LIBRARY_PATH"

# Convert3D (neurodocker build), VPN download (Toronto, out of China) faster.
echo "Downloading Convert3D ..." \
&& mkdir -p /opt/convert3d-1.0.0 \
&& curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download \
| tar -xz -C /opt/convert3d-1.0.0 --strip-components 1 \
--exclude "c3d-1.0.0-Linux-x86_64/lib" \
--exclude "c3d-1.0.0-Linux-x86_64/share" \
--exclude "c3d-1.0.0-Linux-x86_64/bin/c3d_gui"
C3DPATH="/opt/convert3d-1.0.0"
PATH="/opt/convert3d-1.0.0/bin:$PATH"

# AFNI latest (neurodocker build), China server.
apt-get update -qq \
&& apt-get install -y -q --no-install-recommends \
apt-utils \
ed \
gsl-bin \
libglib2.0-0 \
libglu1-mesa-dev \
libglw1-mesa \
libgomp1 \
libjpeg62 \
libxm4 \
netpbm \
tcsh \
#           xfonts-base \    # removed due to: no Package 'xfonts-base' has no installation candidate
xvfb \
&& apt-get clean \
&& rm -rf /var/lib/apt/lists/* \
&& curl -sSL --retry 5 -o /tmp/multiarch.deb http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1.5_amd64.deb \
&& dpkg -i /tmp/multiarch.deb \
&& rm /tmp/multiarch.deb \
&& curl -sSL --retry 5 -o /tmp/libxp6.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
&& dpkg -i /tmp/libxp6.deb \
&& rm /tmp/libxp6.deb \
&& curl -sSL --retry 5 -o /tmp/libpng.deb http://snapshot.debian.org/archive/debian-security/20160113T213056Z/pool/updates/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \
&& dpkg -i /tmp/libpng.deb \
&& rm /tmp/libpng.deb \
&& apt-get install -f \
&& apt-get clean \
&& rm -rf /var/lib/apt/lists/* \
&& gsl2_path="$(find / -name 'libgsl.so.19' || printf '')" \
&& if [ -n "$gsl2_path" ]; then \
ln -sfv "$gsl2_path" "$(dirname $gsl2_path)/libgsl.so.0"; \
fi \
&& ldconfig \
&& echo "Downloading AFNI ..." \
&& mkdir -p /opt/afni-latest \
&& curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \
| tar -xz -C /opt/afni-latest --strip-components 1 \
--exclude "linux_openmp_64/*.gz" \
--exclude "linux_openmp_64/funstuff" \
--exclude "linux_openmp_64/shiny" \
--exclude "linux_openmp_64/afnipy" \
--exclude "linux_openmp_64/lib/RetroTS" \
--exclude "linux_openmp_64/meica.libs" \
# Keep only what we use
&& find /opt/afni-latest -type f -not \( \
-name "3dTshift" -or \
-name "3dUnifize" -or \
-name "3dAutomask" -or \
-name "3dvolreg" \) -delete

PATH="/opt/afni-latest:$PATH"
AFNI_IMSAVE_WARNINGS="NO"
AFNI_PLUGINPATH="/opt/afni-latest"

# Installing ANTs 2.3.3 (NeuroDocker build) # need VPN outside of China for dropbox access
# Note: the URL says 2.3.4 but it is actually 2.3.3
ANTSPATH="/opt/ants"
PATH="/opt/ants:$PATH"
mkdir -p $ANTSPATH
cd $ANTSPATH
curl -sSL --retry 6 "https://dl.dropbox.com/s/gwf51ykkk5bifyj/ants-Linux-centos6_x86_64-v2.3.4.tar.gz" \
| tar -xzC $ANTSPATH --strip-components 1

# Installing and setting up ICA_AROMA
mkdir -p /opt/ICA-AROMA
cd /opt/ICA-AROMA
curl -sSL --retry 6  "https://github.com/oesteban/ICA-AROMA/archive/v0.4.5.tar.gz" \
| tar -xzC /opt/ICA-AROMA --strip-components 1 && \
chmod +x /opt/ICA-AROMA/ICA_AROMA.py
PATH="/opt/ICA-AROMA:$PATH"
AROMA_VERSION="0.4.5"

mkdir -p /opt
cd /opt
curl -sSLO  --retry 5 https://www.humanconnectome.org/storage/app/media/workbench/workbench-linux64-v1.5.0.zip && \
unzip workbench-linux64-v1.5.0.zip && \
rm workbench-linux64-v1.5.0.zip && \
rm -rf /opt/workbench/libs_linux64_software_opengl /opt/workbench/plugins_linux64 && \
strip --remove-section=.note.ABI-tag /opt/workbench/libs_linux64/libQt5Core.so.5
    # ABI tags can interfere when running on Singularity

PATH="/opt/workbench/bin_linux64:$PATH"
LD_LIBRARY_PATH="/opt/workbench/lib_linux64:$LD_LIBRARY_PATH"

# nipreps/miniconda:py39_2205.0

ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
echo "conda activate base" >> ~/.bashrc

# Set CPATH for packages relying on compiled libs (e.g. indexed_gzip)
PATH="/opt/conda/bin:$PATH"
CPATH="/opt/conda/include:$CPATH"
LD_LIBRARY_PATH="/opt/conda/lib:$LD_LIBRARY_PATH"
LANG="C.UTF-8"
LC_ALL="C.UTF-8"
PYTHONNOUSERSITE=1

# Unless otherwise specified each process should only use one thread - nipype
# will handle parallelization
MKL_NUM_THREADS=1
OMP_NUM_THREADS=1

# Create a shared $HOME directory
useradd -m -s /bin/bash -G users vincent
mkdir -p /home/vincent
cd /home/vincent
HOME="/home/vincent"
LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"

echo ". /opt/conda/etc/profile.d/conda.sh" >> $HOME/.bashrc && \
echo "conda activate base" >> $HOME/.bashrc

# Precaching atlases, #China server no VPN

/opt/conda/bin/python fetch_templates.py && \
rm fetch_templates.py && \
find $HOME/.cache/templateflow -type d -exec chmod go=u {} + && \
find $HOME/.cache/templateflow -type f -exec chmod go=u {} +

find $HOME -type d -exec chmod go=u {} + && \
find $HOME -type f -exec chmod go=u {} + && \
rm -rf $HOME/.npm $HOME/.conda $HOME/.empty

# HACK for FreeSurfer 7.2.0
# Fixed in https://github.com/freesurfer/freesurfer/pull/886, so remove on release
FREESURFER="/opt/freesurfer"

# install additional packges by conda 
conda install -c conda-forge -y \
jupyterlab=3.0.16 \
&& conda clean -tipsy \
&& find /opt/conda/ -type f,l -name '*.a' -delete \
&& find /opt/conda/ -type f,l -name '*.pyc' -delete \
&& find /opt/conda/ -type f,l -name '*.js.map' -delete \
&& rm -rf /opt/conda/pkgs

ldconfig
mkdir -p /tmp
cd /tmp

#### Added by Vincent 
# EXPOSE 8888

# code server
curl --retry 5 -o /tmp/code-server.tar.gz -SL https://github.com/coder/code-server/releases/download/v4.9.1/code-server-4.9.1-linux-amd64.tar.gz

su -  root # USER root
mkdir -p /src/codeserver &&\
tar -xvf /tmp/code-server.tar.gz -C /src/codeserver --strip-components=1
	
/src/codeserver/bin/code-server --install-extension eamodio.gitlens && \
/src/codeserver/bin/code-server --install-extension tht13.python && \
/src/codeserver/bin/code-server --install-extension vscode-icons-team.vscode-icons && \
/src/codeserver/bin/code-server --install-extension esbenp.prettier-vscode && \
/src/codeserver/bin/code-server --install-extension jithurjacob.nbpreviewer
	
#setup jupyterlab
mkdir -p ~/.jupyter && echo c.NotebookApp.ip = \"0.0.0.0\" > ~/.jupyter/jupyter_notebook_config.py


# usage example:
# start vscode: /src/codeserver/code-server --auth none ${HOME}/project
# start jupyter-lab: jupyter-lab --notebook-dir=${HOME}/project --no-browser --ip=0.0.0.0 --allow-root
%environment
export TZ=America/Toronto
export DEBIAN_FRONTEND="noninteractive"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export FSL_DIR="/opt/fsl-6.0.5.1"
export OS="Linux"
export FS_OVERRIDE=0
export FIX_VERTEX_AREA=""
export FSF_OUTPUT_FORMAT="nii.gz"
export FREESURFER_HOME="/opt/freesurfer"
export SUBJECTS_DIR="$FREESURFER_HOME/subjects"
export FUNCTIONALS_DIR="$FREESURFER_HOME/sessions"
export MNI_DIR="$FREESURFER_HOME/mni"
export LOCAL_DIR="$FREESURFER_HOME/local"
export MINC_BIN_DIR="$FREESURFER_HOME/mni/bin"
export MINC_LIB_DIR="$FREESURFER_HOME/mni/lib"
export MNI_DATAPATH="$FREESURFER_HOME/mni/data"
export PERL5LIB="$MINC_LIB_DIR/perl5/5.8.5"
export MNI_PERL5LIB="$MINC_LIB_DIR/perl5/5.8.5"
export PATH="$FREESURFER_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH"
export FSLDIR="/opt/fsl-6.0.5.1"
export PATH="/opt/fsl-6.0.5.1/bin:$PATH"
export FSLOUTPUTTYPE="NIFTI_GZ"
export FSLMULTIFILEQUIT="TRUE"
export FSLLOCKDIR=""
export FSLMACHINELIST=""
export FSLREMOTECALL=""
export FSLGECUDAQ="cuda.q"
export LD_LIBRARY_PATH="/opt/fsl-6.0.5.1/lib:$LD_LIBRARY_PATH"
export C3DPATH="/opt/convert3d-1.0.0"
export PATH="/opt/convert3d-1.0.0/bin:$PATH"
export PATH="/opt/afni-latest:$PATH"
export AFNI_IMSAVE_WARNINGS="NO"
export AFNI_PLUGINPATH="/opt/afni-latest"
export ANTSPATH="/opt/ants"
export PATH="/opt/ants:$PATH"
export PATH="/opt/ICA-AROMA:$PATH"
export AROMA_VERSION="0.4.5"
export PATH="/opt/workbench/bin_linux64:$PATH"
export LD_LIBRARY_PATH="/opt/workbench/lib_linux64:$LD_LIBRARY_PATH"
export PATH="/opt/conda/bin:$PATH"
export CPATH="/opt/conda/include:$CPATH"
export LD_LIBRARY_PATH="/opt/conda/lib:$LD_LIBRARY_PATH"
export LANG="C.UTF-8"
export LC_ALL="C.UTF-8"
export PYTHONNOUSERSITE=1
export MKL_NUM_THREADS=1
export OMP_NUM_THREADS=1
export HOME="/home/vincent"
export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export FREESURFER="/opt/freesurfer"
%runscript
cd /tmp
exec /bin/bash jupyter-lab --notebook-dir=/scratch --ip=0.0.0.0 --no-browser --allow-root "$@"
%startscript
cd /tmp
exec /bin/bash jupyter-lab --notebook-dir=/scratch --ip=0.0.0.0 --no-browser --allow-root "$@"
